1. //Updated LoginController.java
package com.example.Mainproject.scp.controller.SclanxPlatform;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCrypt;
import org.springframework.web.bind.annotation.*;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import com.example.Mainproject.scp.service.FetchService;

@RestController
@RequestMapping("/api")
public class LoginController {

    private static final String SECRET_KEY = "RSPSclanxisaplatformtoholdallrispostaproducts";

    @Autowired
    private FetchService fetchService;

    // CORS Preflight Request
    @RequestMapping(value = "/login", method = RequestMethod.OPTIONS)
    public ResponseEntity<?> handleOptions() {
        return ResponseEntity.ok().build();
    }

    // Login Endpoint
    @PostMapping("/login")
    public ResponseEntity<Map<String, Object>> login(@RequestBody Map<String, String> payload) {
        try {
            String userId = payload.get("userId");
            String password = payload.get("password");

            if (userId == null || password == null || userId.isEmpty() || password.isEmpty()) {
                return new ResponseEntity<>(Map.of("error", "User ID and password are required"), HttpStatus.BAD_REQUEST);
            }

            // Fetch user credentials
            Map<String, String> credentials = fetchService.fetchData("login_manager", userId, password);

            if (credentials.containsKey(userId) && BCrypt.checkpw(password, credentials.get(userId))) {
                String token = generateToken(userId);

                // Prepare success response
                Map<String, Object> response = new HashMap<>();
                response.put("userId", userId);
                response.put("token", token);

                return new ResponseEntity<>(response, HttpStatus.OK);
            } else {
                return new ResponseEntity<>(Map.of("error", "Invalid credentials"), HttpStatus.UNAUTHORIZED);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>(Map.of("error", "Internal server error"), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // Generate JWT Token
    @SuppressWarnings("deprecation")
    private String generateToken(String userId) {
        long currentTimeMillis = System.currentTimeMillis();
        long expirationTime = currentTimeMillis + 3600000; // 1 hour validity
        return Jwts.builder()
                .setSubject(userId)
                .setIssuedAt(new Date(currentTimeMillis))
                .setExpiration(new Date(expirationTime))
                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)
                .compact();
    }
}


//Updated FetchService.java
package com.example.Mainproject.scp.service;

import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;

@Service
public class FetchService {

    public Map<String, String> fetchData(String tableName, String userId, String password) {
        // Simulated database logic
        // Replace this with actual database fetching logic
        Map<String, String> dummyDatabase = new HashMap<>();
        dummyDatabase.put("user1", "$2a$10$9qwZ9Jh5F7bR9qwZ09awEAixEY.BtKlWzKnVPdKfcd.GZFkxHZmRO"); // password: "password123"
        dummyDatabase.put("user2", "$2a$10$NT9.RIsOmB3YXoRYoM/bhOROEcY/bjECkdPR1cWuvWnho7ySZiyXq"); // password: "admin123"

        if (dummyDatabase.containsKey(userId)) {
            return Map.of(userId, dummyDatabase.get(userId));
        } else {
            return new HashMap<>(); // Empty map if user doesn't exist
        }
    }
}
