//Backend: Add Reset Password Logic (LoginController)
@RestController
@RequestMapping("/api")
public class LoginController {

    @Autowired
    private FetchService fetchService;

    private static final String SECRET_KEY = "RSPSclanxisaplatformtoholdallrispostaproducts";

    // Endpoint to handle password reset
    @PostMapping("/reset-password")
    public ResponseEntity<Map<String, String>> resetPassword(@RequestBody Map<String, String> payload) {
        try {
            String userId = payload.get("userId");
            String newPassword = payload.get("newPassword");

            if (userId == null || newPassword == null || newPassword.isEmpty()) {
                return new ResponseEntity<>(Map.of("error", "User ID or new password is missing"), HttpStatus.BAD_REQUEST);
            }

            boolean updated = fetchService.updatePassword(userId, newPassword);
            if (updated) {
                return new ResponseEntity<>(Map.of("message", "Password reset successful"), HttpStatus.OK);
            } else {
                return new ResponseEntity<>(Map.of("error", "Failed to reset password"), HttpStatus.BAD_REQUEST);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>(Map.of("error", "Internal server error"), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}



//FetchService.java
import org.springframework.security.crypto.bcrypt.BCrypt;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;

@Service
public class FetchService {

    // Dummy database (replace this with your actual database integration)
    private Map<String, String> credentialsDatabase = new HashMap<>();

    public Map<String, String> fetchData(String tableName, String userId, String password) {
        // Simulated database fetch logic
        return credentialsDatabase;
    }

    public boolean updatePassword(String userId, String newPassword) {
        try {
            if (credentialsDatabase.containsKey(userId)) {
                String hashedPassword = BCrypt.hashpw(newPassword, BCrypt.gensalt());
                credentialsDatabase.put(userId, hashedPassword);
                return true;
            }
            return false;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
}


//frontend
import React, { useState } from 'react';

const ResetPassword = () => {
    const [userId, setUserId] = useState('');
    const [newPassword, setNewPassword] = useState('');
    const [message, setMessage] = useState('');

    const handleResetPassword = async (e) => {
        e.preventDefault();
        try {
            const response = await fetch('/api/reset-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ userId, newPassword }),
            });

            const data = await response.json();
            if (response.ok) {
                setMessage(data.message);
            } else {
                setMessage(data.error || 'Error resetting password');
            }
        } catch (error) {
            console.error('Error:', error);
            setMessage('Something went wrong. Please try again later.');
        }
    };

    return (
        <div className="reset-password-container">
            <h2>Reset Password</h2>
            <form onSubmit={handleResetPassword}>
                <input
                    type="text"
                    placeholder="User ID"
                    value={userId}
                    onChange={(e) => setUserId(e.target.value)}
                    required
                />
                <input
                    type="password"
                    placeholder="New Password"
                    value={newPassword}
                    onChange={(e) => setNewPassword(e.target.value)}
                    required
                />
                <button type="submit">Reset Password</button>
            </form>
            {message && <p>{message}</p>}
        </div>
    );
};

export default ResetPassword;
